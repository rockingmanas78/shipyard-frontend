import React from "react";
import api from "../api";

// Small helper to resolve image URL served by backend
const imgURL = (id) =>
  `${api.defaults.baseURL}/uploads/${encodeURIComponent(id)}`;

export default function Summary() {
  const stored = JSON.parse(localStorage.getItem("iship_results") || "{}");
  const results = stored?.results || {};
  const perImage = Array.isArray(results?.per_image) ? results.per_image : [];
  const counts =
    results?.batch_summary || {
      fire_hazard_count: 0,
      trip_fall_count: 0,
      none_count: 0,
    };

  const [meta, setMeta] = React.useState({
    date: new Date().toISOString().slice(0, 10),
    vesselName: "",
    imo: "",
    flag: "",
    callSign: "",
    location: "",
    inspector: "",
    reportRef: "",
  });

  if (!results || perImage.length === 0) {
    return (
      <div className="max-w-6xl mx-auto py-10 text-gray-700">
        No results yet. Please upload and analyze photos first.
      </div>
    );
  }

  // Persist a per-row edit back into localStorage (so .docx gets your edits)
  const persistRow = (rowIndex, updater) => {
    const copy = JSON.parse(localStorage.getItem("iship_results") || "{}");
    const list = copy?.results?.per_image || [];
    if (!list[rowIndex]) return;

    const next = { ...list[rowIndex], ...updater };

    // normalize recommendations (semicolon separated -> array)
    if (typeof next.recommendations_high_severity_only === "string") {
      next.recommendations_high_severity_only = next.recommendations_high_severity_only
        .split(";")
        .map((s) => s.trim())
        .filter(Boolean);
    }
    list[rowIndex] = next;
    copy.results.per_image = list;
    localStorage.setItem("iship_results", JSON.stringify(copy));
  };

  const download = async () => {
    const clean = JSON.parse(localStorage.getItem("iship_results") || "{}");
    const res = await api.post("/api/report", { meta, results: clean.results || results });
    const url = res.data?.url;
    if (url) window.open(`http://localhost:5000${url}`, "_blank");
  };

  // ---- Display condition helpers ----
  const displayCondition = (it) => {
    const hasRecs = (it.recommendations_high_severity_only || []).length > 0;
    const rust = !!it.tags?.rust_stains;

    // If model said "none" but we have rust or recs, mark it accordingly
    if (it.condition === "none" && rust) return "rust";
    if (it.condition === "none" && hasRecs) return "attention";
    return it.condition; // fire_hazard | trip_fall | none
  };

  const Tag = ({ value }) => {
    const labelMap = {
      fire_hazard: "Fire hazard",
      trip_fall: "Trip/Fall",
      none: "Satisfactory",
      rust: "Rust",
      attention: "Attention",
    };
    const color =
      value === "fire_hazard"
        ? "bg-red-50 text-red-700 border-red-200"
        : value === "trip_fall"
        ? "bg-amber-50 text-amber-800 border-amber-200"
        : value === "rust"
        ? "bg-orange-50 text-orange-800 border-orange-200"
        : value === "attention"
        ? "bg-sky-50 text-sky-800 border-sky-200"
        : "bg-emerald-50 text-emerald-800 border-emerald-200";
    return (
      <span className={`text-xs px-2 py-1 rounded-full border ${color}`}>
        {labelMap[value] || value}
      </span>
    );
  };

  return (
    <div className="max-w-6xl mx-auto py-8">
      {/* Title */}
      <div className="mb-6">
        <h1 className="text-2xl font-semibold text-gray-900">
          Vessel Inspection Report
        </h1>
        <p className="text-sm text-gray-500 mt-1">
          Generated by iShip Inspection AI â€” review, edit, and export.
        </p>
      </div>

      {/* Report meta (document style) */}
      <div className="rounded-xl border bg-white shadow-sm p-5">
        <div className="grid md:grid-cols-2 gap-3 text-sm">
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Vessel name"
            onChange={(e) => setMeta({ ...meta, vesselName: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="IMO"
            onChange={(e) => setMeta({ ...meta, imo: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Flag"
            onChange={(e) => setMeta({ ...meta, flag: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Call sign"
            onChange={(e) => setMeta({ ...meta, callSign: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Location/Port"
            onChange={(e) => setMeta({ ...meta, location: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Inspector"
            onChange={(e) => setMeta({ ...meta, inspector: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            placeholder="Report ref"
            onChange={(e) => setMeta({ ...meta, reportRef: e.target.value })}
          />
          <input
            className="border rounded-lg p-2 bg-white text-gray-900"
            value={meta.date}
            onChange={(e) => setMeta({ ...meta, date: e.target.value })}
          />
        </div>
      </div>

      {/* Summary cards */}
      <div className="grid md:grid-cols-3 gap-4 mt-6">
        <div className="rounded-xl border bg-white shadow-sm p-4">
          <div className="text-xs text-gray-500">Fire hazards</div>
          <div className="text-3xl font-semibold text-gray-900">
            {counts.fire_hazard_count}
          </div>
        </div>
        <div className="rounded-xl border bg-white shadow-sm p-4">
          <div className="text-xs text-gray-500">Trip / fall</div>
          <div className="text-3xl font-semibold text-gray-900">
            {counts.trip_fall_count}
          </div>
        </div>
        <div className="rounded-xl border bg-white shadow-sm p-4">
          <div className="text-xs text-gray-500">Satisfactory</div>
          <div className="text-3xl font-semibold text-gray-900">
            {counts.none_count}
          </div>
        </div>
      </div>

      {/* Observations table (document style, editable) */}
      <div className="mt-8 rounded-xl border bg-white shadow-sm">
        <div className="px-5 py-4 border-b">
          <h2 className="font-semibold text-gray-900">Observations</h2>
          <p className="text-sm text-gray-500">
            Edit comments and recommendations inline.
          </p>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead className="bg-gray-50 text-gray-600 border-b">
              <tr>
                <th className="text-left font-medium px-5 py-3 w-40">Photo</th>
                <th className="text-left font-medium px-3 py-3">File</th>
                <th className="text-left font-medium px-3 py-3">Condition</th>
                <th className="text-left font-medium px-3 py-3 w-[40%]">Comment</th>
                <th className="text-left font-medium px-3 py-3 w-[30%]">
                  Recommendations
                </th>
              </tr>
            </thead>
            <tbody>
              {perImage.map((it, idx) => {
                const initialComment = it.comment || "";
                const initialRecs = (it.recommendations_high_severity_only || []).join("; ");

                const onBlurComment = (e) => {
                  persistRow(idx, { comment: e.target.value });
                };
                const onBlurRecs = (e) => {
                  persistRow(idx, {
                    recommendations_high_severity_only: e.target.value,
                  });
                };

                return (
                  <tr key={it.id} className="border-b align-top">
                    <td className="px-5 py-3">
                      <div className="w-32 h-24 rounded-lg border bg-gray-100 overflow-hidden">
                        <img
                          src={imgURL(it.id)}
                          alt={it.id}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.currentTarget.src = "/placeholder.png"; // provide a default thumbnail in public folder
                            e.currentTarget.onerror = null; // prevent infinite loop
                          }}
                        />
                      </div>
                    </td>
                    <td className="px-3 py-3">
                      <div className="text-gray-900">{it.id}</div>
                      {it.location ? (
                        <div className="text-xs text-gray-500 mt-1">
                          Location: {it.location}
                        </div>
                      ) : null}
                    </td>
                    <td className="px-3 py-3">
                      <Tag value={displayCondition(it)} />
                    </td>
                    <td className="px-3 py-3">
                      <textarea
                        className="w-full border rounded-lg p-2 bg-white text-gray-900 min-h-[72px]"
                        defaultValue={initialComment}
                        onBlur={onBlurComment}
                      />
                    </td>
                    <td className="px-3 py-3">
                      {(it.recommendations_high_severity_only?.length > 0 ||
                        initialRecs) ? (
                        <textarea
                          className="w-full border rounded-lg p-2 bg-white text-gray-900 min-h-[72px]"
                          placeholder="Use ; between items"
                          defaultValue={initialRecs}
                          onBlur={onBlurRecs}
                        />
                      ) : (
                        <div className="text-xs text-gray-400">â€”</div>
                      )}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>

      {/* Export */}
      <div className="mt-6">
        <button
          onClick={download}
          className="px-6 py-3 rounded-lg bg-gray-900 text-white hover:bg-gray-800"
        >
          Download .docx report
        </button>
      </div>
    </div>
  );
}